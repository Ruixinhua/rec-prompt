guide_instruction_complex = """Generate a better prompt that guides the recommender in making recommendations. The generated prompt must be placed between "# Prompt Template Begin" and "# Prompt Template End" and must include the placeholders "${history}" under "## User's History News" and "${candidate}" under "## Candidate News". Observe the differences between "# Best Prompt Template" and "# Current Prompt Template". If "# Best Prompt Template" and "# Current Prompt Template" are different, analyze why "# Best Prompt Template" is better than "# Current Prompt Template", and on this basis, improve "# Best Prompt Template" to achieve better recommendation results. Do not directly copy sentences from the "# Current Prompt Template" and "# Best Prompt Template". 
"""
guide_instruction_naive = """The generated prompt must be placed between "# Prompt Template Begin" and "# Prompt Template End" and must include the placeholders "${history}" under "## User's History News" and "${candidate}" under "## Candidate News".
"""

guide_instruction_3tune3_io = """Generate a better prompt that guides the recommender in making recommendations. The generated prompt must be placed between "# Prompt Template Begin" and "# Prompt Template End" and must include the placeholders "${history}" under "## User's History News" and "${candidate}" under "## Candidate News"."""

observation_instruction_3tune3_io = """Focus on the given sample and analyze the content of the prompt for the recommender and the recommender's answer based on the user's click. Observations can focus on the following aspects:
- Whether the recommender's answer correctly extracts the keywords from the user's history news.
- Whether the keywords extracted from the recommender's answer accurately summarise the topics of interest to the user.
- Whether the recommender's answer correctly extracts keywords from the candidate news and correctly matches the user's interests.
Based on the observations, you can enhance the prompt by adding a description of the recommendation task, the breakdown of the recommendation process, and the constraints on the final output format so that the recommender can make corresponding recommendations based on semantics only. Here are some suggestions for enhancing the prompt:
- Use a step-by-step approach to ensure the recommendations are semantically related to the user's preferences.
- Under "# Input", you can use "${history}" as the placeholder for the user's history news and "${candidate}" as the placeholder for the candidate news.
- Under "# Task Description", you can add a description of the news recommendation task, such as 'User's History News' being the news the user has interacted with previously and 'Candidate News' being news the user may be interested in. The recommendation should solely rely on the user's interests, not the order in which the news appears in 'Candidate News'. This task selects the news most relevant to the user's interests.
- Under "# Recommendation Process", a detailed recommendation process can be added, such as analyzing and summarizing the user's interests. Keywords are extracted from 'User's History News' and then grouped by meaning, with semantically similar words representing related concepts called a "Topic". These keywords can summarize and infer topics the user is interested in. Then, extract keywords from 'Candidate News' and analyze how well the keywords extracted from each Candidate News match the user's topics of interest. Again, it emphasized that the recommendation should not be affected by the position of the news in the 'Candidate News' but only by the matching relationship between the candidate news and the user's interests.
- Under "# Output Format", define the output format. Summarize the user's interest and rank candidate news according to their relevance to the user's interest in the format: "Candidate news ranked solely by relevance to the user's interests: <START>C#, C#, C#, C#, C#, C#, C#, C#, C#, C#<END>"."""

guide_instruction_4tune3_io = """Generate a better prompt that guides the recommender in making recommendations. The generated prompt must be placed between "# Prompt Template Begin" and "# Prompt Template End" and must include the placeholders "${history}" under "## User's History News" and "${candidate}" under "## Candidate News"."""

observation_instruction_4tune3_io = """Focus on the given sample and analyze the content of the prompt for the recommender and the recommender's answer based on the user's click. Observations can focus on the following aspects:
- Whether the recommender's answer correctly extracts the keywords from the user's history news.
- Whether the keywords extracted from the recommender's answer accurately summarise the topics of interest to the user.
- Whether the recommender's answer correctly extracts keywords from the candidate news and correctly matches the user's interests.
Based on the observations, you can enhance the prompt by adding a description of the recommendation task, the breakdown of the recommendation process, and the constraints on the final output format so that the recommender can make corresponding recommendations based on semantics only. Here are some suggestions for enhancing the prompt:
- Use a step-by-step approach to ensure the recommendations are semantically related to the user's preferences.
- Under "# Input", you can use "${history}" as the placeholder for the user's history news and "${candidate}" as the placeholder for the candidate news.
- Under "# Task Description", you can add a description of the news recommendation task, such as 'User's History News' being the news the user has interacted with previously and 'Candidate News' being news the user may be interested in. The recommendation should solely rely on the user's interests, not the order in which the news appears in 'Candidate News'. This task selects the news most relevant to the user's interests.
- Under "# Recommendation Process", a detailed recommendation process can be added, such as analyzing and summarizing the user's interests. Keywords are extracted from 'User's History News' and then grouped by meaning, with semantically similar words representing related concepts called a "Topic". These keywords can summarize and infer topics the user is interested in. Then, extract keywords from 'Candidate News' and analyze how well the keywords extracted from each Candidate News match the user's topics of interest. Again, it emphasized that the recommendation should not be affected by the position of the news in the 'Candidate News' but only by the matching relationship between the candidate news and the user's interests.
- Under "# Output Format", define the output format. Summarize the user's interest and rank candidate news according to their relevance to the user's interest in the format: "Candidate news ranked solely by relevance to the user's interests: <START>C#, C#, C#, C#, C#, C#, C#, C#, C#, C#<END>"."""
# - Under "# Output Format", define the output format. Summarize the user's interest and rank candidate news according to their relevance to the user's interest. The output should first rank candidate news based on the user's history news and then provide explanations. The explanation should accurately and comprehensively summarize the topics of the user's interest. Then, you should also infer the candidates' topics and determine which candidates are relevant to the user's interest.
guide_instruction_3tune3_cot = """Generate a better prompt that guides the recommender in making recommendations. The generated prompt must be placed between "# Prompt Template Begin" and "# Prompt Template End" and must include the placeholders "${history}" under "## User's History News" and "${candidate}" under "## Candidate News"."""

observation_instruction_3tune3_cot = """Focus on the given sample and analyze the content of the prompt for the recommender and the recommender's answer based on the user's click. Observations can focus on the following aspects:
- Whether the recommender's answer correctly extracts the keywords from the user's history news.
- Whether the keywords extracted from the recommender's answer accurately summarise the topics of interest to the user.
- Whether the recommender's answer correctly extracts keywords from the candidate news and correctly matches the user's interests.
Based on the observations, you can enhance the prompt by adding a description of the recommendation task, the breakdown of the recommendation process, and the constraints on the final output format so that the recommender can make corresponding recommendations based on semantics only. Here are some suggestions for enhancing the prompt:
- Use a step-by-step approach to ensure the recommendations are semantically related to the user's preferences.
- Under "# Input", you can use "${history}" as the placeholder for the user's history news and "${candidate}" as the placeholder for the candidate news.
- Under "# Task Description", you can add a description of the news recommendation task, such as 'User's History News' being the news the user has interacted with previously and 'Candidate News' being news the user may be interested in. The recommendation should solely rely on the user's interests, not the order in which the news appears in 'Candidate News'. This task selects the news most relevant to the user's interests.
- Under "# Recommendation Process", a detailed recommendation process can be added, such as analyzing and summarizing the user's interests. Keywords are extracted from 'User's History News' and then grouped by meaning, with semantically similar words representing related concepts called a "Topic". These keywords can summarize and infer topics the user is interested in. Then, extract keywords from 'Candidate News' and analyze how well the keywords extracted from each Candidate News match the user's topics of interest. Again, it emphasized that the recommendation should not be affected by the position of the news in the 'Candidate News' but only by the matching relationship between the candidate news and the user's interests.
- Under "# Output Format", define the output format. Summarize the user's interest and rank candidate news according to their relevance to the user's interest in the format: "Candidate news ranked solely by relevance to the user's interests: <START>C#, C#, C#, C#, C#, C#, C#, C#, C#, C#<END>"."""

guide_instruction_4tune3_cot = """Generate a better prompt that guides the recommender in making recommendations. The generated prompt must be placed between "# Prompt Template Begin" and "# Prompt Template End" and must include the placeholders "${history}" under "## User's History News" and "${candidate}" under "## Candidate News"."""

observation_instruction_4tune3_cot = """Focus on the given sample and analyze the content of the prompt for the recommender and the recommender's answer based on the user's click. Observations can focus on the following aspects:
- Whether the recommender's answer correctly extracts the keywords from the user's history news.
- Whether the keywords extracted from the recommender's answer accurately summarise the topics of interest to the user.
- Whether the recommender's answer correctly extracts keywords from the candidate news and correctly matches the user's interests.
Based on the observations, you can enhance the prompt by adding a description of the recommendation task, the breakdown of the recommendation process, and the constraints on the final output format so that the recommender can make corresponding recommendations based on semantics only. Here are some suggestions for enhancing the prompt:
- Use a step-by-step approach to ensure the recommendations are semantically related to the user's preferences.
- Under "# Input", you can use "${history}" as the placeholder for the user's history news and "${candidate}" as the placeholder for the candidate news.
- Under "# Task Description", you can add a description of the news recommendation task, such as 'User's History News' being the news the user has interacted with previously and 'Candidate News' being news the user may be interested in. The recommendation should solely rely on the user's interests, not the order in which the news appears in 'Candidate News'. This task selects the news most relevant to the user's interests.
- Under "# Recommendation Process", a detailed recommendation process can be added, such as analyzing and summarizing the user's interests. Keywords are extracted from 'User's History News' and then grouped by meaning, with semantically similar words representing related concepts called a "Topic". These keywords can summarize and infer topics the user is interested in. Then, extract keywords from 'Candidate News' and analyze how well the keywords extracted from each Candidate News match the user's topics of interest. Again, it emphasized that the recommendation should not be affected by the position of the news in the 'Candidate News' but only by the matching relationship between the candidate news and the user's interests.
- Under "# Output Format", define the output format. Summarize the user's interest and rank candidate news according to their relevance to the user's interest in the format: "Candidate news ranked solely by relevance to the user's interests: <START>C#, C#, C#, C#, C#, C#, C#, C#, C#, C#<END>"."""

guide_instruction_4tune4_io = """Generate a better prompt that guides the recommender in making recommendations. The generated prompt must be placed between "# Prompt Template Begin" and "# Prompt Template End" and must include the placeholders "${history}" under "## User's History News" and "${candidate}" under "## Candidate News"."""

observation_instruction_4tune4_io = """Focus on the given sample and analyze the content of the prompt for the recommender and the recommender's answer based on the user's click. Observations can focus on the following aspects:
- Whether the recommender's answer correctly extracts the keywords from the user's history news.
- Whether the keywords extracted from the recommender's answer accurately summarise the topics of interest to the user.
- Whether the recommender's answer correctly extracts keywords from the candidate news and correctly matches the user's interests.
You should generate an enhanced prompt template based on the above observations, detailing the task requirements so that the recommender can answer using the guidance given above. Use "${history}" as the placeholder for the "User's History News" and "${candidate}" as the placeholder for the "Candidate News". Based on the observations, you can enhance the prompt by adding a description of the recommendation task, the breakdown of the recommendation process, and the constraints on the final output format so that the recommender can make corresponding recommendations based on semantics only. You should use a step-by-step approach to ensure the recommendations are semantically related to the user's preferences."""

guide_instruction_4tune4_cot = """Generate a better prompt that guides the recommender in making recommendations. The generated prompt must be placed between "# Prompt Template Begin" and "# Prompt Template End" and must include the placeholders "${history}" under "## User's History News" and "${candidate}" under "## Candidate News". """

observation_instruction_4tune4_cot = """Focus on the given sample and analyze the content of the prompt for the recommender and the recommender's answer based on the user's click. You can enhance the prompt by adding a description of the recommendation task and processing. Here are some suggestions for enhancing the prompt:
- Under "# Input", you can use "${history}" as the placeholder for the user's history news and "${candidate}" as the placeholder for the candidate news.
- Under "# Task Description", you can add a description of the news recommendation task, such as 'User's History News' being the news followed by corresponding categories that the user has interacted with previously and 'Candidate News' being news followed by categories that the user may be interested in. The recommendation should solely rely on the user's interests from the history recording, not the order in which the news appears in 'Candidate News'. 
- Under "# Recommendation Process," a detailed processing can be added, such as analyzing and summarizing the user's interests based on the content of news headlines and categories.
Under "# Output Format," define the output format. Summarize the user's interest and rank candidate news according to its relevance to the user's interest.
"""
# - Use a step-by-step approach to ensure the recommendations are semantically related to the user's preferences.

"""Focus on the given sample and analyze the content of the prompt for the recommender and the recommender's answer based on the user's click. Observations can focus on the following aspects:
- Whether the recommender's answer correctly extracts the keywords from the user's history news.
- Whether the keywords extracted from the recommender's answer accurately summarise the topics of interest to the user.
- Whether the recommender's answer correctly extracts keywords from the candidate news and correctly matches the user's interests.
You should generate an enhanced prompt template based on the above observations, detailing the task requirements so that the recommender can answer using the guidance given above. Use "${history}" as the placeholder for the "User's History News" and "${candidate}" as the placeholder for the "Candidate News". First, you can ask the model to "think step by step and recommend candidate news articles" at the top of the prompt template before the section "# Input". Based on the observations, you can enhance the prompt by adding a description of the recommendation task, the breakdown of the recommendation process, and the constraints on the final output format so that the recommender can make corresponding recommendations based on semantics only."""
